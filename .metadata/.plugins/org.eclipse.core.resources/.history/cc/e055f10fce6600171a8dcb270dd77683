package cn.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

import cn.anno.Hello;

@Component
@Aspect
public class MyAspect {
	
	@Pointcut(value="execution(* cn.service..*(..))")
	public void pointcut(){
		
	}
	
	@Before(value="pointcut()")
	public void before(){
		System.out.println("前置通知");
	}
	
	@Around(value="pointcut()")
	public Object around(ProceedingJoinPoint joinPoint) throws Throwable{
		System.out.println("环绕通知开始");
		Object result = joinPoint.proceed();
		System.out.println("环绕通知结束");
		return result;
	}
	
	@AfterReturning(value="pointcut()",returning="result")
	public void afterReturn(JoinPoint joinPoint,Object result){
		String methodName = joinPoint.getSignature().getName();  
        System.out.println("the method name is "+methodName+" and result is " + result);  
	}
}

