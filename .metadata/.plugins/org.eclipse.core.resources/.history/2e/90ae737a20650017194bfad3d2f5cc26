package proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import tx.TranscationManager;

//动态代理，完成事务控制
public class DynamicProxy {
	//生成代理对象
	public static Object getProxy(final Object target,final TranscationManager tx){
		Object proxy = Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), new InvocationHandler() {
			
			@Override
			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
				try {
					tx.begin();
					method.invoke(target, args);
					tx.commit();
				} catch (Exception e) {
					e.printStackTrace();
				}
				return null;
			}
		});
		
		return null;
	}
}
