package cn.aspect;


import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.List;

import javax.annotation.Resource;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;


import cn.anno.PrivilegeInfo;
import cn.tx.TranscationManager;
import cn.util.Privilege;
@Component
@Aspect
public class PersonAspect {
	
	
	
	@Around(value="execution(* cn.service..*(..))")
	public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
		//3.获取用户列表
		List<String> pList = Privilege.getpList();
		//4.获取方法上的注释
		/**
		 * 获取方法名称
		 */
		String methodName = joinPoint.getSignature().getName();
		//获取目标方法参数，返回值是Object数组
		Object[] args = joinPoint.getArgs();
		//将Object转化为class类型，方便下面操作
		Class[] argClass = new Class[args.length];
		for(int i =0;i<args.length;i++){
			argClass[i] = args[i].getClass();
		}
		//获取目标对象
		Class targetClass = joinPoint.getTarget().getClass();
		//获取method对象
		Method method = targetClass.getMethod(methodName, argClass);
		
		//判断有没有注解
		if(method.isAnnotationPresent(( PrivilegeInfo.class))){
			//该方法上有权限注解
			PrivilegeInfo info = method.getAnnotation(PrivilegeInfo.class);
			//获取权限注解的值
			String name = info.name();
			//判断
			if(pList.contains(name)){
				System.out.println("权限SSS");
			}else {
				System.out.println("您没有权限");
			}
		}else {
			System.out.println("您没有权限");
		}
		
		
		
		Object object = joinPoint.proceed();
		return object;
	}

}
