package cn.aspect;


import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.springframework.stereotype.Component;
@Component

public class MyAspect {
	@Around("execution(* cn.service..*(..))")
	public Object around(ProceedingJoinPoint joinPoint) throws Throwable{
		System.out.println("环绕通知开始");
		Object obj = (String) joinPoint.proceed();
		System.out.println(obj);
		System.out.println("环绕通知结束");
		return obj;
	}
	@AfterReturning(value="execution(* cn.service..*(..))",returning="number")
	public void afterReturn(String number){
		System.out.println("返回通知"+number);
	}
	
	@AfterThrowing(value="execution(* cn.service..*(..))",throwing="throwable")
	public void afterThrow(Throwable throwable){
		System.out.println("异常通知"+throwable.getMessage());
	}
}
