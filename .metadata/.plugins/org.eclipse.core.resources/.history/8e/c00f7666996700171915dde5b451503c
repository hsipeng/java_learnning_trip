package cn.aspect;

import javax.annotation.Resource;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

import cn.anno.Transactional;
import cn.tx.TranscationManager;
@Component
@Aspect
public class PersonAspect {
	
	@Resource
	private TranscationManager tx;
	@Around(value="execution(* cn.servlet..*(..)) && @annotation(tran)")
	public Object around(ProceedingJoinPoint joinPoint,Transactional tran) throws Throwable {
		tx.begin();
		Object object = joinPoint.proceed();
		tx.commit();
		
		return object;
	}
	
}
